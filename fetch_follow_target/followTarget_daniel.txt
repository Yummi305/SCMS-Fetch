#include "followTarget.h"
#include "laserprocessing.h"

// FollowTarget Constructor
FollowTarget::FollowTarget(ros::NodeHandle nh) : nh(nh)
{
    // ROS Subscriber
    laser_subscribe_ = nh.subscribe("orange/laser/scan", 100, &FollowTarget::laserCallback, this);

    // ROS Service
    marker_sub = nh.subscribe("/aruco_single/pose", 1000, &FollowTarget::tagCallback, this);
    cmd_vel_pub = nh.advertise<geometry_msgs::Twist>("cmd_vel", 1);

    AT.distanceLimit = 1.0;

    duration = start - start;

    sweepComplete = false;
    objectDetected = false;
    searchReported = false;

    ROS_INFO_STREAM("FollowTarget Fetch created");
}

// Default destructor when program ends.
FollowTarget::~FollowTarget()
{
    if (laserProcessingPtr_ != nullptr)
    {
        delete laserProcessingPtr_;
    }
}

//void FollowTarget::tagCallback(const geometry_msgs::Vector3Stamped::ConstPtr &msg)
void FollowTarget::tagCallback(const geometry_msgs::PoseStamped::ConstPtr &msg)

{
    if (!AT.detected)
    {
        AT.detected = true;
        searchReported = false;
        ROS_INFO_STREAM("Guider has been detected");
        sweepComplete = false;
    }

    AT.pose.vector.x = msg->vector.z;
    AT.pose.vector.y = msg->vector.x;
    AT.pose.vector.z = msg->vector.y;

    AT.shortDist = roundf64(sqrt(pow(AT.pose.vector.x, 2) + pow(AT.pose.vector.y, 2)) * 10) / 10;
    AT.thresholdErr = 0.01;

    if (AT.shortDist <= (AT.distanceLimit + AT.thresholdErr) && AT.shortDist >= (AT.distanceLimit - AT.thresholdErr))
    {

        cmd_vel.linear.x = 0.0;
        cmd_vel.angular.z = 0.0;
        if(!AT.reached){
            ROS_INFO_STREAM("Guider stationary");
            AT.reached = true;
        }
    }

    // adjust linear angular velocity
    else
    {
        AT.reached = false;
        if (!objectDetected)
        {
            double error = AT.shortDist - AT.distanceLimit;
            if (AT.shortDist > AT.distanceLimit * 1.5)
            {
                cmd_vel.linear.x = error;
            }
            else if (AT.shortDist < AT.distanceLimit* 0.95)
            {
                cmd_vel.linear.x = -0.3;
            }
            else
                cmd_vel.linear.x = error / 2;



            if (AT.pose.vector.y == 0)
            {
                cmd_vel.angular.z = 0;
            }
            else
                cmd_vel.angular.z = -AT.pose.vector.y;
        }
    }

    cmd_vel_pub.publish(cmd_vel);

    start = ros::Time::now();
}


void FollowTarget::run()
{
    ROS_INFO_STREAM("run function");
    // While loop so that robot is always looking for target.
    while (ros::ok())
    {
        if (duration > ros::Duration(20.0)){
            start = ros::Time::now();
        }

        duration = ros::Time::now() - start;

        if (duration >= ros::Duration(2.0) && duration <= ros::Duration(8.0) && !AT.detected && !sweepComplete){
            cmd_vel.angular.z = -1.57;
            cmd_vel.linear.x = 0;
            cmd_vel_pub.publish(cmd_vel);
            if(searchReported){
                ROS_INFO_STREAM("Searching for AT");
                searchReported = true;
            }
        }

        if (duration > ros::Duration(8.0) && duration <= ros::Duration(14.0) && !AT.detected && !sweepComplete){
            cmd_vel.angular.z = 1.57;
            cmd_vel.linear.x = 0.0;
            cmd_vel_pub.publish(cmd_vel);
        }

        if (duration == ros::Duration(14.0) && !AT.detected && !sweepComplete){
            sweepComplete = true;
            searchReported = false;
            ROS_INFO_STREAM("NO TAG FOUND. STOPPING SEARCH");
        }

        if (duration >= ros::Duration(3.0) && AT.detected){
            ROS_INFO_STREAM("NO TAG FOUND, STOPPING OPERATION");
            AT.detected = false;
            sweepComplete = false;
            start = ros::Time::now();
        }
        // if (fetchMission == false)
        // {
        //     ROS_INFO_STREAM("fetchMission is false.");
        // }
        // else
        // {
        //     ROS_INFO_STREAM("fetchMission is true.");
        // }

        // if (fetchMission == false)
        // {
        //     ROS_INFO_STREAM("Fetch not moving forward due to obstacle.");

        //     // Stop Fetch from driving forward and colliding with obstacle
        //     stop();
        //     continue;
        // }
        // else
        // {
        //     ROS_INFO_STREAM("Fetch still running.");
        // }

        // ROS_INFO_STREAM("About to make laser.");
        // // New Laser scan.
        // LaserProcessing laser;

        // ROS_INFO_STREAM("Hopefully a laser has been made before this.");

        // ROS_INFO_STREAM("About to make a new laser scan.");

        // // Process laser reading.
        // laser.newScan(laser_scan_);

        // ROS_INFO_STREAM("Hopepfully a new laser has been made.");

        // ROS_INFO_STREAM("About to check for an obstacle.");
        // // Check if obstacle is blocking robot.
        // if (laser.checkObstacle())
        // {
        //     ROS_INFO_STREAM("OBSTACLED DETECTED.");
        //     // fetchMission = false;
        // } else {
        //     ROS_INFO_STREAM("NO OBSTACLE DETECTED.");
        // }
    }
}

void FollowTarget::laserCallback(const sensor_msgs::LaserScanPtr &msg)
{
    laser_scan_ = *msg;
}

